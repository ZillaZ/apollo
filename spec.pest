WHITESPACE = _{ " " | NEWLINE | "\x09" | "\t" }

index_access        = _{ "[" ~ value ~ "]" }
import              =  { "use" ~ namespace }
name_str            = @{ (ASCII_ALPHANUMERIC | "_" | "/" | "::")+ }
generic_id          =  { ASCII_ALPHA }
program             = _{ SOI ~ expr+ ~ EOI }
array_type          =  { "array(" ~ datatype ~ value? ~ ")" }
array               =  { array_type ~ "[" ~ (value ~ ("," ~ value)*)? ~ "]" }
array_access        =  { (call | name) ~ index_access }
string              = @{ "\"" ~ char* ~ "\"" }
char                = _{
    !("\"" | "\\") ~ ANY
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | "0")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
char_value          = @{ "'" ~ char ~ "'" }
integer             = @{ unsigned? ~ ASCII_DIGIT+ }
float               = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
binary_op           = _{ bt_xor | bt_and | bt_left | bt_right | bt_or | modulo | add | sub | mul | div | gte | gt | lte | lt | cmp_eq | neq | and | or }
overloaded_op       =  { (field_access | name) ~ overloaded_ops ~ value }
modulo              =  { "%" }
add                 =  { "+" }
sub                 =  { "-" }
mul                 =  { "*" }
div                 =  { "/" }
add_to              =  { "+=" }
sub_to              =  { "-=" }
mul_to              =  { "*=" }
div_to              =  { "/=" }
bt_left             =  { "<<" }
bt_right            =  { ">>" }
bt_or               =  { "|" }
bt_and              =  { "&" }
bt_xor              =  { "~" }
dd                  = _{ ":" }
eq                  = _{ "=" }
gt                  =  { ">" }
lt                  =  { "<" }
lte                 =  { "<=" }
gte                 =  { ">=" }
cmp_eq              =  { "eq" | "==" }
neq                 =  { "not eq" | "!=" }
and                 =  { "and" | "&&" }
or                  =  { "or" | "||" }
macro_call          =  { name ~ "!" ~ "(" ~ (arg ~ (v ~ arg)*)? ~ ")" }
attribute           =  { name_str ~ ("(" ~ attribute ~ ")")? }
struct              =  { "struct" ~ name_str ~ "{" ~ (trait_field | field_decl)* ~ "}" }
enum                =  { "enum" ~ struct_type ~ "{" ~ enum_variant+ ~ "}" }
enum_variant        =  { struct_type ~ ("(" ~ datatype ~ ")")? }
enum_variant_name   =  @{ 'A'..'Z' ~ ASCII_ALPHANUMERIC* }
enum_build          =  { struct_type ~ "." ~ enum_variant_name ~ ("(" ~ value ~ ")")? }
enum_match          =  { name_str ~ "." ~ enum_variant_name ~ ("(" ~ name_str ~ ")")? }
field_decl          =  { name_str ~ dd ~ datatype }
closure             =  { "|" ~ (name_str ~ ("," ~ name_str)*)? ~ "|" ~ block }
base_value          =  { macro_call | closure | constructor | array | "(" ~ range ~ ")" | bool | enum_build | field_access | array_access | call | char_value | float | integer | name | string | "(" ~ value ~ ")" }
bvalue              =  { base_value ~ type_casting? }
neg                 =  { "-" }
unary_op            = _{ neg | not }
unary_operation     =  { unary_op ~ bvalue }
binary_operation    =  { bvalue ~ (binary_op ~ bvalue)+ }
value               = _{ binary_operation | unary_operation | bvalue }
overloaded_ops      =  { add_to | sub_to | mul_to | div_to }
expr                = _{ (macro_call | macro | variadic_block | assembly | for | while | lib_link | trait | enum | struct | import | impl | overloaded_op | return | function | call | block | declaration | assignment | if | field_access) }
variadic_block      =  { ".variadics" ~ block }
declaration         =  { let ~ name ~ (dd ~ datatype)? ~ (eq ~ value)? }
assignment          =  { (array_access | field_access | name) ~ eq ~ value }
call                =  { name ~ "(" ~ (arg ~ (v ~ arg)*)? ~ ")" }
arg                 =  { value }
name                =  { !"if" ~ !integer ~ (ref | deref)* ~ name_str }
function            =  { function_kind? ~ fn ~ name ~ args ~ return_type? ~ block }
exported            = _{ "export" }
return_type         = _{ arrow ~ datatype }
arrow               = _{ "->" }
any                 =  { "Any" }
voidptr             =  { "voidptr" }
macro               =  { "#" ~ "[" ~ attribute+ ~ "]" }
args                =  { "(" ~ (variadic | ((parameter ~ ("," ~ parameter)*)? ~ ("," ~ variadic)?)?) ~ ")" }
v                   = _{ "," }
implements_type     =  { "(" ~ (name_str ~ ("," ~ name_str)*)? ~ ")" }
variadic            =  { "..." ~ "variadic" ~ dd ~ implements_type }
parameter           =  { name ~ dd ~ (implements_type | datatype) }
datatype            =  { ref* ~ (voidptr | any_type | trait_type | array_type | float_type | int_type | string_type | char_type | bool_type | struct_type) }
bool_type           =  { "bool" }
struct_type         = @{ name_str ~ ("::" ~ name_str)* }
int_type            =  { unsigned? ~ "i" ~ integer }
char_type           =  { "char" }
float_type          =  { "f" ~ integer }
string_type         =  { "string" ~ !"s::" }
string_value        =  { "\"" ~ string ~ "\"" }
asm_arg             =  { "(" ~ ("[" ~ name ~ "]")? ~ string ~ value ~ ")" }
asm_in              =  { ":in" ~ "{" ~ asm_arg+ ~ "}" }
asm_out             =  { ":out" ~ "{" ~ asm_arg+ ~ "}" }
asm_clob            =  { ":clob" ~ "{" ~ string+ ~ "}" }
volatile            =  { "volatile" }
assembly            =  { "#asm" ~ volatile? ~ "{" ~ string ~ asm_in? ~ asm_out? ~ asm_clob? ~ "}" }
unsigned            =  { "u" }
fn                  = _{ "fn" }
let                 = _{ "let" }
block               =  { "{" ~ expr* ~ return? ~ "}" }
return              =  { "return" ~ value? }
not                 =  { "!" }
if                  =  { "if" ~ (enum_match | value) ~ block ~ otherwise? }
otherwise           =  { "else" ~ (block | if) }
bool                =  { "true" | "false" }
field               =  { name_str ~ dd ~ value }
constructor         =  { "new" ~ name_str ~ "{" ~ field+ ~ "}" }
ref                 =  { "&" }
deref               =  { "^" }
field_access        =  { field_access_helper ~ "." ~ field_access_helper ~ ("." ~ field_access_helper)* }
field_access_helper = _{ array_access | call | name }
trait_field         =  { "#[" ~ name_str ~ "]" }
trait_function      =  { "fn" ~ name_str ~ "(" ~ (parameter ~ ("," ~ parameter)*)? ~ ")" ~ (arrow ~ datatype)? }
trait_generic_type  =  { "type" ~ name_str ~ eq ~ "(" ~ name_str* ~ ")" }
trait_decl          =  { trait_function | trait_generic_type }
trait               =  { "trait" ~ name_str ~ "{" ~ trait_decl+ ~ "}" }
trait_type          =  { "'" ~ name_str }
any_type            =  { "Any" }
type_casting        =  { "as" ~ datatype }
namespace_name      = @{ (ASCII_ALPHANUMERIC | "_")+ }
namespace           =  { namespace_name ~ (("::" ~ namespace) | "{" ~ namespace+ ~ "}")* }
extern              = _{ "extern" }
function_kind       =  { extern | exported }
lib_link            =  { "link" ~ "with" ~ string }
while               =  { "while" ~ value ~ block }
for                 =  { "for" ~ name ~ "in" ~ value ~ block }
range               =  { value ~ range_type ~ value }
range_type          =  { range_inclusive | range_exclusive }
range_inclusive     =  { "..=" }
range_exclusive     =  { ".." }
impl                =  { "impl" ~ name ~ (impl_for ~ name)? ~ impl_block }
impl_for            =  { "for" }
impl_block          =  { "{" ~ impl_expr* ~ "}" }
impl_expr           = _{ function | impl_type }
impl_type           =  { "type" ~ name_str ~ eq ~ name_str }
