use std::strings { strings::len }

trait Display {
	type T = ()
	fn fmt(self: T) -> string
}

impl Display for String {
	type T = String
	fn fmt(self: T) -> string {
		return self.data
	}
}

impl Display for i4 {
	type T = i4
	fn fmt(self: i4) -> string {
		let copy = self
		let len = 1
		while copy > 9 {
			copy /= 10
			len += 1
		}
		let data : &char = malloc(len+1)
		data[len] = '\0'
		for i in (1..len) {
			data[len-i] = (self % 10) + 48
			self /= 10
		}
		data[0] = self + 48
		return data
	}
}

fn println(input: &string, count: i4) {
	let size: ui8 = 0
	for i in (0..count) {
		size += strings::len(input[i])
	}
	size += count + 1
	let value : &char = malloc(size)
	let offset = 0
	for i in (0..count) {
		let data = input[i]
		let len = strings::len(data)
		memcpy(&value[offset], data, len)
		value[offset + len] = ' '
		offset += len + 1
	}
	value[size] = '\0'
	let result : ui8 = 0
	#asm {
"
xor %%rdi, %%rdi
mov %1, %%rsi
mov %2, %%rdx
mov $1, %%rax
syscall
"
		:in { ("r" value) ("r" size) }
		:out { ("=a" result) }
		:clob { "rdi" "rsi" "rdx" "memory" }
	}
	return
}
