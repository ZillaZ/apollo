enum AuthKind {
	Bearer(String)
	Basic(String)
}

impl AuthKind {
	fn from_str(value: String) -> AuthKind {
		let whitespace : i8 = value.find(' ')
		let kind = value.range(0, whitespace)
		let auth_value = value.range(whitespace+1, value.len)
		if kind.data == "Bearer" {
			return AuthKind.Bearer(auth_value)
		}else{
			return AuthKind.Basic(auth_value)
		}
	}
}

enum HttpMethod {
	Get
	Post
	Delete
	Put
	Patch
	Head
	Options
}

impl HttpMethod {
	fn parse(data: String) -> HttpMethod {
		let new_line : i8 = data.find('\n')
		let method_str = data.range(0, new_line - 1)
		if method_str == "GET" {
			return HttpMethod.Get
		}else if method_str == "POST" {
			return HttpMethod.Post
		}else if method_str == "DELETE" {
			return HttpMethod.Delete
		}else if method_str == "PUT" {
			return HttpMethod.Put
		}else if method_str == "PATCH" {
			return HttpMethod.Patch
		}else if method_str == "HEAD" {
			return HttpMethod.Head
		}else{
			return HttpMethod.Options
		}
	}
}

enum Header {
	ContentType(String)
	Authentication(AuthKind)
	ContentLength(ui8)
}

impl Header {
	fn print(self: Header) {
		if self.ContentType(ct) {
			printf("Content-Type: %s\n", ct)
		}else if self.Authentication(auth) {
			printf("Auth\n")
		}else if self.ContentLength(len) {
			printf("Content-Length: %d\n", len)
		}
		return
	}

	fn from_string(kind: String, value: String) -> Header {
		if kind == "Content-Type" {
			return Header.ContentType(value)
		}else if kind == "Content-Length" {
			let conv = value.to_int() as ui8
			return Header.ContentLength(conv)
		}else if kind == "Authentication" {
			return Header.Authentication(AuthKind.from_str(value))
		}
		return Header.ContentLength(0 as ui8)
	}
}

struct Headers {
	headers: &Header
	size: i4
}

impl Headers {
	fn build(data: String, out: &ui8) -> Headers {
		let result = data.split('\n')
		let aux : Header
		let headers : &Header = malloc(result.count * size_of(aux))
		let count = 0
		let flag = false
		for i in (0..result.count) {
			let line = result.slice[i]
			let line_end : i8 = data.find('\n')
			flag = data.range(line, line_end).is_empty()
			if !flag {
				count += 1
			}
		}
		for i in (0..count) {
			let line = result.slice[i]
			let line_end : i8 = data.find('\n')
			let kind_end : i8 = data.find(':')
			let kind = data.range(0, kind_end)
			let value = data.range(kind_end+1, line_end)
			let header = Header.from_string(kind, value)
			headers[i] = header
		}
		return headers
	}

	fn print(self: &Headers) {
		for i in (0..self.size) {
			let header = self.headers[i]
			header.print()
		}
		return
	}
}

struct Request {
	method: HttpMethod
	path: String
	headers: Headers
	payload: &ui1
}

impl Request {
	fn parse(data: String) -> Request {
		let new_line = data.find('\n')
		let method = HttpMethod.parse(data)
		let path_start : i8 = data.find(' ')
		let sub = data.range(path_start + 1, new_line)
		let path_end = sub.find(' ')
		let path = data.range(path_start, path_end)
		sub.free()
		printf("Path is %s with len %d\n", path.fmt(), path.len)
		let headers_str = data.range(new_line + 1, data.len - new_line - 1)
		let out : ui8 = 0
		let headers = Headers.build(headers_str, &out)
		let payload = headers_str.range(out, headers_str.len)
		return new Request { method: method path: path headers: headers payload: payload }
	}
}
