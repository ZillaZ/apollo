use std::mem::allocations::mmap

struct KernelTimespec {
tv_sec: ui8
tv_nsec: ui8
}

fn sleep(seconds: ui8, nanos: ui8) {
	let time = new KernelTimespec {
	tv_sec: seconds
	tv_nsec: nanos
	}
	let time_addr = &time
	let remaining : KernelTimespec
	let remaining_addr = &remaining
	let result : ui8 = 0
	#asm volatile {
"
mov %1, %%rdi
mov %2, %%rsi
mov $0x23, %%rax
syscall
"
		:in { ("r" time_addr) ("r" remaining_addr) }
		:out { ("=a" result) }
		:clob { "rdi" "rsi" "rcx" "r11" "memory" }
	}
	return
}

#[expandable(head)]
fn fork(){
	let pid : ui8 = 0
	#asm volatile {
"
xor %%rdi, %%rdi
mov $0x39, %%rax
syscall
"
		:out { ("=a" pid ) }
		:clob { "rdi" "rcx" "r11" "memory" }}
	if pid != 0 {
		return
	}
}
