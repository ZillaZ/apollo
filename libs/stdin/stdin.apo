extern fn realloc(mem: Any, capacity: i8) -> Any {}

struct String {
data: string
len: i4
}

fn read_line() -> String {
	let capacity = 128
	let total_read = 0
	let mem : &char = malloc(capacity)
	let flag = true
	while flag {
		if total_read >= (capacity - 1) {
			capacity *= 2
			let aux = realloc(mem, capacity)
			mem = aux
		}
		let to_read: i8 = capacity - total_read
		let addr = &mem[total_read]
		let bytes_in = 0
		#asm { "
xor %%rdi, %%rdi
mov %1, %%rsi
mov %2, %%rdx
xor %%rax, %%rax
syscall
"
			:in { ("r" addr) ("r" to_read) }
			:out { ("=a" bytes_in) }
			:clob { "rdi" "rsi" "rdx" "rcx" "r11" "memory" }
		}
		total_read += bytes_in
		if bytes_in == 0 or (total_read >= 1 and mem[total_read-1] == '\n') {
			flag = false
		}
	}
	return new String { data: mem len: total_read - 1 }
}
