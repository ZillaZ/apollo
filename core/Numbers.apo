impl i8 {
	fn abs(self: i8) -> i8 {
		if self < 0 {
			return -self
		}
		return self
	}

	fn max(self: i8, other: i8) -> i8 {
		if self < other {
			return other
		}else{
			return self
		}
	}

	fn fmt(self: i8) -> string {
		let is_neg = self < 0
		let copy = self.abs()
		let len = 1
		while copy > 9 {
			copy /= 10
			len += 1
		}

		if is_neg {
			len += 1
		}
		let data : &char = malloc(len + 1)

		data[len] = '\0'
		let offset = 0
		if self < 0 {
			offset = 1
		}

		for i in (1..len) {
			data[len-i] = (self.abs() % 10) + 48
			self /= 10
		}
		if is_neg {
			data[0] = '-'
		}else{
			data[0] = (self % 10) + 48
		}
		return data
	}

	fn to_string(self: i8) -> String {
		let data = self.fmt()
		return String.from_str(data)
	}
}

impl i4 {
	fn to_string(self: i4) -> String {
		let copy = self
		let len = 1
		while copy > 9 {
			copy /= 10
			len += 1
		}

		let data : &char = malloc(len+1)
		data[len] = '\0'
		for i in (1..len) {
			data[len-i] = (self % 10) + 48
			self /= 10
		}
		data[0] = self + 48
		return String.from_str(data)
	}

	fn is_whitespace(self: char) -> bool {
		return (self == ' ') or (self == '\n') or (self == '\r') or (self == '\t')
	}
}
