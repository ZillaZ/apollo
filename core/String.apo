struct SplitResult {
slice: &String
count: ui8
}

struct String {
data: &char
len: ui8
capacity: ui8
}

impl String {
	fn new() -> String {
		let capacity : ui8 = 128
		return new String { data: malloc(capacity) len: 0 capacity: capacity }
	}

	fn from_str(value: string) -> String {
		let i = 0
		while value[i] != '\0' {
			i += 1
		}
		return new String { data: value len: i capacity: i }
	}

	fn range(self: &String, start: ui8, end: ui8) -> String {
		let rtn : &char = malloc(end - start)
		for i in (start..end) {
			rtn[i] = self.data[i]
		}
		return new String { data: rtn len: end - start capacity: end - start }
	}

	fn count(self: &String, target: char) -> ui8 {
		let count : ui8 = 0
		for i in (0..self.len) {
			if self.data[i] == target {
				count += 1
			}
		}
		return count
	}

	fn find(self: &String, target: char) -> i8 {
		for i in (0..self.len) {
			if self.data[i] == target {
				return i
			}
		}
		return -1
	}

	fn split(self: &String, target: char) -> SplitResult {
		let count : ui8 = self.count(target)
		let rtn : &String = malloc(24 * count)
		let offset : ui8 = 0
		let raw = self.data
		for i in (0..count) {
			let end = self.find(target)
			rtn[i] = self.range(0, end)
			self.data = self.data[end]
		}
		return new SplitResult { slice: rtn count: count }
	}

	fn empty(self: String) -> bool {
		return self.len == 0
	}

	fn to_int(self: String) -> i8 {
		let result : i8 = 0
		for i in (0..self.len) {
			result = result * 10 + (self.data[i] - 48)
		}
		return result
	}

	fn free(self: String) {
		free(self.data)
		return
	}

	fn fmt(self: &String) -> string {
		return self.data
	}
}
